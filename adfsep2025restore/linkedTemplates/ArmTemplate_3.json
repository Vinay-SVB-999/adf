{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adfsep2025restore"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ds_SqlServer_Src_tables_bulk_load_from_sql_to_blob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLServerOnPrem",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string"
					},
					"table": {
						"type": "string"
					}
				},
				"folder": {
					"name": "bulk_load_tables_from_SQL_to_blob"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_JSON_to_CSV')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_src_load_json_to_csv",
								"type": "DatasetReference"
							},
							"name": "sourceJsonadls"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sink_load_json_to_csv",
								"type": "DatasetReference"
							},
							"name": "sinkcsvfiletoadls"
						}
					],
					"transformations": [
						{
							"name": "flattensplitArraycolumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {SO Id} as string,",
						"          SODate as string,",
						"          Country as string,",
						"          Sales as (Item as string, Qty as string, Value as string)[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> sourceJsonadls",
						"sourceJsonadls foldDown(unroll(Sales, Sales),",
						"     mapColumn(",
						"          {SO Id},",
						"          SODate,",
						"          Country,",
						"          Item = Sales.Item,",
						"          Qty = Sales.Qty,",
						"          Value = Sales.Value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattensplitArraycolumns",
						"flattensplitArraycolumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {SO Id} as string,",
						"          SODate as string,",
						"          Country as string,",
						"          Item as string,",
						"          Qty as string,",
						"          Value as string",
						"     ),",
						"     partitionFileNames:['sales_json.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkcsvfiletoadls"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Load_Length_CSV_File_to_SQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_src_fixed_lenth_ADLS_to_SQL",
								"type": "DatasetReference"
							},
							"name": "SourceFixedLength"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sink_fixed_length_ADLS_to_SQL",
								"type": "DatasetReference"
							},
							"name": "sinkloadtoSQLTable"
						}
					],
					"transformations": [
						{
							"name": "splitColumns"
						},
						{
							"name": "selectsplietedcolumns"
						},
						{
							"name": "castchangedatatypes"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {empname        dept                    dob                   salary            } as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceFixedLength",
						"SourceFixedLength derive({EmpName   } = substring({empname        dept                    dob                   salary            }, 1, 15),",
						"          {Dept         } = substring({empname        dept                    dob                   salary            }, 16, 24),",
						"          DOB = substring({empname        dept                    dob                   salary            }, 40, 22),",
						"          Salary = substring({empname        dept                    dob                   salary            }, 62, 18)) ~> splitColumns",
						"splitColumns select(mapColumn(",
						"          {EmpName   },",
						"          {Dept         },",
						"          DOB,",
						"          Salary",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectsplietedcolumns",
						"selectsplietedcolumns cast(output(",
						"          {EmpName   } as string,",
						"          {Dept         } as string,",
						"          DOB as date,",
						"          Salary as integer",
						"     ),",
						"     errors: true) ~> castchangedatatypes",
						"castchangedatatypes sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          empname as string,",
						"          dept as string,",
						"          dob as date,",
						"          salary as decimal(12,2)",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          empname = {EmpName   },",
						"          dept = {Dept         },",
						"          dob = DOB,",
						"          salary = Salary",
						"     )) ~> sinkloadtoSQLTable"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_load_csv_to_json')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_src_adls_csv_to_json",
								"type": "DatasetReference"
							},
							"name": "srccsvtojson"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sink_adls_csv_to_json",
								"type": "DatasetReference"
							},
							"name": "sinkcsvtojson"
						}
					],
					"transformations": [
						{
							"name": "CreateNewcolumnforsubcolumns"
						},
						{
							"name": "Groupbyandaggregateforsubcolumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {SO Id} as string,",
						"          SODate as string,",
						"          Country as string,",
						"          Item as string,",
						"          Qty as string,",
						"          Value as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> srccsvtojson",
						"srccsvtojson derive(Sales = @(Item_id=Item,",
						"          QTY_Value=Qty,",
						"          Value_num=Value)) ~> CreateNewcolumnforsubcolumns",
						"CreateNewcolumnforsubcolumns aggregate(groupBy({SO Id},",
						"          SODate,",
						"          Country),",
						"     Sales = collect(Sales)) ~> Groupbyandaggregateforsubcolumns",
						"Groupbyandaggregateforsubcolumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['sales_csv.json'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkcsvtojson"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_mutliple_Rows_to_single_row')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_src_mutliple_Rows_to_single_row",
								"type": "DatasetReference"
							},
							"name": "srcmutlipleRows"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sink_mutliple_Rows_to_single_row",
								"type": "DatasetReference"
							},
							"name": "sinksinglerowvalue"
						}
					],
					"transformations": [
						{
							"name": "aggregateGroupBy"
						},
						{
							"name": "derivedColumnaddcolumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ItemId as string,",
						"          VartId as string,",
						"          ItemName as string,",
						"          VartName as string,",
						"          WhNo as string,",
						"          Zone as string,",
						"          Bin as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> srcmutlipleRows",
						"srcmutlipleRows aggregate(groupBy(ItemId,",
						"          ItemName),",
						"     VartName = collect(VartName)) ~> aggregateGroupBy",
						"aggregateGroupBy derive(VartName = replace(replace(replace(toString(VartName),'\"',''),'[',''),']','')) ~> derivedColumnaddcolumn",
						"derivedColumnaddcolumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['itemsdetailsinfo.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinksinglerowvalue"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_split_single_row_into_multiple_rows')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_src_split_single_row_into_multiple_rows",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureDataLakeStorageGen2",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "flatten1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ItemId as string,",
						"          ItemName as string,",
						"          VartName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(VartName = split(VartName, ',')) ~> derivedColumn1",
						"derivedColumn1 foldDown(unroll(VartName, VartName),",
						"     mapColumn(",
						"          ItemId,",
						"          ItemName,",
						"          VartName",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'output',",
						"     folderPath: 'MutlipleRowstoSingleRow',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:['iteminfo.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_1_Load_Multiple_Files_Excel_Sheets_to_Different_SQL_Tables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata 1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_src1_GM1_Load_multiple_files_Excel_Sheets_to_Different_SQL_Tables",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata 1').output.childItems",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_2_Load_Multiple_Files_Excel_Sheets_to_Different_SQL_Tables",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"FileName": {
												"value": "@item().name",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-09-26T07:08:05Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_df_JSON_to_CSV')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_JSON_to_CSV",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_JSON_to_CSV",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceJsonadls": {},
									"sinkcsvfiletoadls": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-09-22T13:04:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_JSON_to_CSV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_df_Load_Length_CSV_File_to_SQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dffixedlenthgcsvtosql",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Load_Length_CSV_File_to_SQL",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceFixedLength": {},
									"sinkloadtoSQLTable": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-09-22T11:50:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Load_Length_CSV_File_to_SQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_df_load_csv_to_json')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_load_csv_to_json",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_load_csv_to_json",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srccsvtojson": {},
									"sinkcsvtojson": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-09-22T16:09:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_load_csv_to_json')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_df_mutliple_Rows_to_single_row')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_mutliple_Rows_to_single_row",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_mutliple_Rows_to_single_row",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcmutlipleRows": {},
									"sinksinglerowvalue": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-09-23T05:53:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_mutliple_Rows_to_single_row')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_df_split_single_row_into_multiple_rows')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_split_single_row_into_multiple_rows",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_split_single_row_into_multiple_rows",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-09-24T05:52:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_split_single_row_into_multiple_rows')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_tables_bulk_load_from_sql_to_blob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Look_for_Tables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT \n    TABLE_SCHEMA,\n    TABLE_NAME\nFROM INFORMATION_SCHEMA.TABLES\nWHERE TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_SCHEMA, TABLE_NAME;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_SqlServer_Src_tables_bulk_load_from_sql_to_blob",
								"type": "DatasetReference",
								"parameters": {
									"schema": "1",
									"table": "1"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "iteratelookupop",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Look_for_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Look_for_Tables').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "sql_to_blob_tablesload",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_SqlServer_Src_tables_bulk_load_from_sql_to_blob",
											"type": "DatasetReference",
											"parameters": {
												"schema": {
													"value": "@item().TABLE_SCHEMA",
													"type": "Expression"
												},
												"table": {
													"value": "@item().TABLE_NAME",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_blob_sink_tables_bulk_load_from_sql_to_blob",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@concat(item().TABLE_SCHEMA,'_',item().TABLE_NAME,'.csv')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-09-10T06:13:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_SqlServer_Src_tables_bulk_load_from_sql_to_blob')]"
			]
		}
	]
}